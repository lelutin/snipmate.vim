snippet #!
	#!/usr/bin/env python

snippet imp
	import ${1:module}
snippet from
	from ${1:module} import ${2:component}
# Module Docstring
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet wh
	while ${1:condition}:
		${2:# code...}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet try Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}
# debugging
snippet pdb
	import pdb
	pdb.set_trace()
snippet pp
	import pprint
	pprint.pprint(${1:x})${2}
# Unit testing with mox
snippet test
	def test_${1:something}(self):
		"""${2:Group}: ${3:Test X with Y}"""
		${4:obj} = self.wrap_subject(${5:class_to_mock}, "${6:test_subject_method}")
		${10:$8 = "something"}
		self.m.ReplayAll()
		self.assert${7:Equal}(
			${8:test_data},
			${9:$4.$6()}
		)
		self.m.VerifyAll()
snippet mock
	self.m.CreateMock(${1:Class})${2}
snippet mockany
	self.m.CreateMockAnything()
snippet mockcall
	${1:mock_object}.${2:method}(${3})\
		.AndReturn(${4:value})${5}
snippet mockstub
	self.m.StubOutWithMock(${1:object}, "${2:method_name}")${3}
